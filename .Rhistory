edgelist <- read.delim('./courseEdgelist.tsv', stringsAsFactors = F)[,c(2,3)]
G <- graph.data.frame(edgelist)
ghosts <- c('architectural_studies', 'french', 'black_studies', 'computer_science',
'chemistry', 'economics', 'russian', 'spanish', 'neuroscience',
'mathematics', 'english', 'geology', 'american_studies', 'physics',
'anthropology_sociology', 'german', 'history', 'psychology',
'european_studies', 'sexuality_womens_gender_studies', 'ljst',
'political_science', 'asian', 'art', 'philosophy', 'film', 'courses',
'music', 'Biology', 'theater_dance', 'astronomy', 'environmental_studies',
'classics', 'religion')
vids <- which(V(G)$name %in% ghosts)
# identify each course's level
courseVids<- which(!(V(G)$name %in% ghosts))
majorVids <- which(V(G)$name %in% ghosts)
temp <- strsplit(V(G)[courseVids]$name, '-')
tempLevel <- c()
for (i in temp){
tempLevel <- c(tempLevel, substr(i[2], 1, 1))
}
V(G)[courseVids]$level <- unlist(as.integer(tempLevel))
V(G)[majorVids]$level <- 0
# run the sugiyama layout algorithm and incrase the coordinates for future readability
lyt <- layout.sugiyama(G, layers = V(G)$level )
biggerX <- lyt$layout[,1]*10
biggerY <- lyt$layout[,2]*100
# create and eport a tsv of the layout's coordinates
nodes <- get.data.frame(G, what = "vertices")
nodes["X"] <- biggerX
nodes["Y"] <- biggerY
nodes["Id"] <- nodes["name"]
nodes["name"] <- NULL
write.table(nodes, file = "newCourseLayout.tsv", sep = '\t', row.names = F)
major2Dept <- list(architectural_studies = 'ARCH',
french = 'FREN',
black_studies = 'BLST',
computer_science = 'COSC',
chemistry = 'CHEM',
economics = 'ECON',
russian = 'RUSS',
spanish = 'SPAN',
neuroscience = 'NEUR',
mathematics = 'MATH',
english = 'ENGL',
geology = 'GEOL',
american_studies = 'AMST',
physics = 'PHYS',
anthropology_sociology = 'ANTH',
german = 'GERM',
history = 'HIST',
psychology = 'PSYC',
european_studies = 'EUST',
sexuality_womens_gender_studies = 'SWAG',
ljst = 'LJST',
political_science = 'POSC',
asian = 'ASLC',
art = 'ARHA',
philosophy = 'PHIL',
film = 'FILM',
biochemistry_biophysics = 'BCBP',
music = 'MUSI',
Biology = 'BIOL',
theater_dance = 'THDA',
astronomy = 'ASTR',
environmental_studies = 'ENST',
classics = 'CLAS',
religion = 'RELI')
major2Dept[ghosts]
major2Dept[ghosts][1]
V(G)[V(G)$name == 'courses']$name <- 'biochemistry_biophysics'
V(G)[majorVids]$mainDept <- major2Dept[V(G)[majorVids]$name]
V(G)[majorVids]$mainDept
# read in the edgelist and create an igraph object
edgelist <- read.delim('./courseEdgelist.tsv', stringsAsFactors = F)[,c(2,3)]
G <- graph.data.frame(edgelist)
# identify dummy nodes representing majors
ghosts <- c('architectural_studies', 'french', 'black_studies', 'computer_science',
'chemistry', 'economics', 'russian', 'spanish', 'neuroscience',
'mathematics', 'english', 'geology', 'american_studies', 'physics',
'anthropology_sociology', 'german', 'history', 'psychology',
'european_studies', 'sexuality_womens_gender_studies', 'ljst',
'political_science', 'asian', 'art', 'philosophy', 'film', 'courses',
'music', 'Biology', 'theater_dance', 'astronomy', 'environmental_studies',
'classics', 'religion')
V(G)[V(G)$name == 'courses']$name <- 'biochemistry_biophysics'
# makes a map from the major names to their department codes
major2Dept <- list(architectural_studies = 'ARCH',
french = 'FREN',
black_studies = 'BLST',
computer_science = 'COSC',
chemistry = 'CHEM',
economics = 'ECON',
russian = 'RUSS',
spanish = 'SPAN',
neuroscience = 'NEUR',
mathematics = 'MATH',
english = 'ENGL',
geology = 'GEOL',
american_studies = 'AMST',
physics = 'PHYS',
anthropology_sociology = 'ANTH',
german = 'GERM',
history = 'HIST',
psychology = 'PSYC',
european_studies = 'EUST',
sexuality_womens_gender_studies = 'SWAG',
ljst = 'LJST',
political_science = 'POSC',
asian = 'ASLC',
art = 'ARHA',
philosophy = 'PHIL',
film = 'FILM',
biochemistry_biophysics = 'BCBP',
music = 'MUSI',
Biology = 'BIOL',
theater_dance = 'THDA',
astronomy = 'ASTR',
environmental_studies = 'ENST',
classics = 'CLAS',
religion = 'RELI')
# identify each course's level
courseVids<- which(!(V(G)$name %in% ghosts))
majorVids <- which(V(G)$name %in% ghosts)
temp <- strsplit(V(G)[courseVids]$name, '-')
tempLevel <- c()
tempDept <- c()
for (i in temp){
tempLevel <- c(tempLevel, substr(i[2], 1, 1))
tempDept <- c(tempDept, i[1])
}
V(G)[courseVids]$level <- unlist(as.integer(tempLevel))
V(G)[majorVids]$level <- 0
V(G)[courseVids]$mainDept <- tempDept
V(G)[majorVids]$mainDept <- major2Dept[V(G)[majorVids]$name]
# run the sugiyama layout algorithm and incrase the coordinates for future readability
lyt <- layout.sugiyama(G, layers = V(G)$level )
biggerX <- lyt$layout[,1]*10
biggerY <- lyt$layout[,2]*100
# create and eport a tsv of the layout's coordinates
nodes <- get.data.frame(G, what = "vertices")
nodes["X"] <- biggerX
nodes["Y"] <- biggerY
nodes["Id"] <- nodes["name"]
nodes["name"] <- NULL
write.table(nodes, file = "newCourseLayout.tsv", sep = '\t', row.names = F)
# identify each course's level
courseVids<- which(!(V(G)$name %in% ghosts))
majorVids <- which(V(G)$name %in% ghosts)
temp <- strsplit(V(G)[courseVids]$name, '-')
tempLevel <- c()
tempDept <- c()
for (i in temp){
tempLevel <- c(tempLevel, substr(i[2], 1, 1))
tempDept <- c(tempDept, i[1])
}
V(G)[courseVids]$level <- unlist(as.integer(tempLevel))
V(G)[majorVids]$level <- 0
V(G)[courseVids]$mainDept <- tempDept
V(G)[majorVids]$mainDept <- unlist(major2Dept[V(G)[majorVids]$name])
# run the sugiyama layout algorithm and incrase the coordinates for future readability
lyt <- layout.sugiyama(G, layers = V(G)$level)
biggerX <- lyt$layout[,1]*10
biggerY <- lyt$layout[,2]*100
# create and eport a tsv of the layout's coordinates
nodes <- get.data.frame(G, what = "vertices")
nodes["X"] <- biggerX
nodes["Y"] <- biggerY
nodes["Id"] <- nodes["name"]
nodes["name"] <- NULL
write.table(nodes, file = "newCourseLayout.tsv", sep = '\t', row.names = F)
nodes
View(nodes)
ghosts <- c('architectural_studies', 'french', 'black_studies', 'computer_science',
'chemistry', 'economics', 'russian', 'spanish', 'neuroscience',
'mathematics', 'english', 'geology', 'american_studies', 'physics',
'anthropology_sociology', 'german', 'history', 'psychology',
'european_studies', 'sexuality_womens_gender_studies', 'ljst',
'political_science', 'asian', 'art', 'philosophy', 'film',
'biochemistry_biophysics','music', 'Biology', 'theater_dance', 'astronomy',
'environmental_studies','classics', 'religion')
V(G)[V(G)$name == 'courses']$name <- 'biochemistry_biophysics'
# read in the edgelist and create an igraph object
edgelist <- read.delim('./courseEdgelist.tsv', stringsAsFactors = F)[,c(2,3)]
G <- graph.data.frame(edgelist)
# identify dummy nodes representing majors
ghosts <- c('architectural_studies', 'french', 'black_studies', 'computer_science',
'chemistry', 'economics', 'russian', 'spanish', 'neuroscience',
'mathematics', 'english', 'geology', 'american_studies', 'physics',
'anthropology_sociology', 'german', 'history', 'psychology',
'european_studies', 'sexuality_womens_gender_studies', 'ljst',
'political_science', 'asian', 'art', 'philosophy', 'film',
'biochemistry_biophysics','music', 'Biology', 'theater_dance', 'astronomy',
'environmental_studies','classics', 'religion')
V(G)[V(G)$name == 'courses']$name <- 'biochemistry_biophysics'
# identify each course's level
courseVids<- which(!(V(G)$name %in% ghosts))
majorVids <- which(V(G)$name %in% ghosts)
temp <- strsplit(V(G)[courseVids]$name, '-')
tempLevel <- c()
tempDept <- c()
for (i in temp){
tempLevel <- c(tempLevel, substr(i[2], 1, 1))
tempDept <- c(tempDept, i[1])
}
V(G)[courseVids]$level <- unlist(as.integer(tempLevel))
V(G)[majorVids]$level <- 0
V(G)[courseVids]$mainDept <- tempDept
V(G)[majorVids]$mainDept <- unlist(major2Dept[V(G)[majorVids]$name])
# run the sugiyama layout algorithm and incrase the coordinates for future readability
lyt <- layout.sugiyama(G, layers = V(G)$level)
biggerX <- lyt$layout[,1]*10
biggerY <- lyt$layout[,2]*100
# create and eport a tsv of the layout's coordinates
nodes <- get.data.frame(G, what = "vertices")
nodes["X"] <- biggerX
nodes["Y"] <- biggerY
nodes["Id"] <- nodes["name"]
nodes["name"] <- NULL
write.table(nodes, file = "newCourseLayout.tsv", sep = '\t', row.names = F)
edgelist
edgelist <- read.delim('./courseEdgelist.tsv', stringsAsFactors = F)[,c(2,3)]
edgelist
edgelist <- read.delim('./courseEdgelist.tsv', stringsAsFactors = F)[,c(2,3)]
edgelist
# identify each course's level
courseVids<- which(!(V(G)$name %in% ghosts))
majorVids <- which(V(G)$name %in% ghosts)
temp <- strsplit(V(G)[courseVids]$name, '-')
tempLevel <- c()
tempDept <- c()
for (i in temp){
tempLevel <- c(tempLevel, substr(i[2], 1, 1))
tempDept <- c(tempDept, i[1])
}
V(G)[courseVids]$level <- unlist(as.integer(tempLevel))
V(G)[majorVids]$level <- 0
V(G)[courseVids]$mainDept <- tempDept
V(G)[majorVids]$mainDept <- unlist(major2Dept[V(G)[majorVids]$name])
# run the sugiyama layout algorithm and incrase the coordinates for future readability
lyt <- layout.sugiyama(G, layers = V(G)$level)
biggerX <- lyt$layout[,1]*10
biggerY <- lyt$layout[,2]*100
# create and eport a tsv of the layout's coordinates
nodes <- get.data.frame(G, what = "vertices")
nodes["X"] <- biggerX
nodes["Y"] <- biggerY
nodes["Id"] <- nodes["name"]
nodes["name"] <- NULL
write.table(nodes, file = "newCourseLayout.tsv", sep = '\t', row.names = F)
?add.vertices
'a' + 'b'
?paste
paste0('a','b')
paste0('a','b','c')
makeLayout <- function(dept){
# finds the addresses of the department's edgelist
efileStr <- paste0('./', dept, 'courseEdgelist.tsv')
# and nodes list
nfileStr <- paste0('./', dept, 'courseAttrs.tsv')
# reads in the graph object from the named edgelist tsv
edgelist <- read.delim(efileStr, stringsAsFactors = F)[,c(2,3)]
G <- graph.data.frame(edgelist)
# read in unconnected nodes from the named nodes table
nodeAttrs <- read.delim(nfileStr, stringsAsFactors = F)
unconnectedCourses <- nodeAttrs$Id[!(nodeAttrs$Id %in% V(G)$name)]
G <- add.vertices(G, length(unconnectedCourses),
attr = list(name = unconnectedCourses))
# some of my layouts include majors as nodes; identify these
courseVids <- which(!(V(G)$name %in% majors))
majorVids <- which(V(G)$name %in% majors)
courseVids<- which(!(V(G)$name %in% majors))
# identify each course's level, main department
temp <- strsplit(V(G)[courseVids]$name, '-')
tempLevel <- c()
tempDept <- c()
for (i in temp){
tempLevel <- c(tempLevel, substr(i[2], 1, 1))
tempDept <- c(tempDept, i[1])
}
V(G)[courseVids]$level <- unlist(as.integer(tempLevel))
V(G)[majorVids]$level <- 0
V(G)[courseVids]$mainDept <- tempDept
V(G)[majorVids]$mainDept <- unlist(major2Dept[V(G)[majorVids]$name])
# run the sugiyama layout algorithm and incrase the coordinates for future readability
lyt <- layout.sugiyama(G, layers = V(G)$level)
biggerX <- lyt$layout[,1]*10
biggerY <- lyt$layout[,2]*100
# create and eport a tsv of the layout's coordinates
nodes <- get.data.frame(G, what = "vertices")
nodes["X"] <- biggerX
nodes["Y"] <- biggerY
nodes["Id"] <- nodes["name"]
nodes["name"] <- NULL
write.table(nodes, file = paste0(dept, "CourseLayout.tsv"), sep = '\t', row.names = F)
}
makeLayout('asian')
majors <- c('architectural_studies', 'french', 'black_studies', 'computer_science',
'chemistry', 'economics', 'russian', 'spanish', 'neuroscience',
'mathematics', 'english', 'geology', 'american_studies', 'physics',
'anthropology_sociology', 'german', 'history', 'psychology',
'european_studies', 'sexuality_womens_gender_studies', 'ljst',
'political_science', 'asian', 'art', 'philosophy', 'film', 'courses',
'music', 'Biology', 'theater_dance', 'astronomy', 'environmental_studies',
'classics', 'religion')
makeLayout('asian')
makeLayout <- function(dept){
# finds the addresses of the department's edgelist
efileStr <- paste0('./', dept, 'courseEdgelist.tsv')
# and nodes list
nfileStr <- paste0('./', dept, 'courseAttrs.tsv')
# reads in the graph object from the named edgelist tsv
edgelist <- read.delim(efileStr, stringsAsFactors = F)[,c(2,3)]
G <- graph.data.frame(edgelist)
# read in unconnected nodes from the named nodes table
nodeAttrs <- read.delim(nfileStr, stringsAsFactors = F)
unconnectedCourses <- nodeAttrs$Id[!(nodeAttrs$Id %in% V(G)$name)]
G <- add.vertices(G, length(unconnectedCourses),
attr = list(name = unconnectedCourses))
# identify each course's level, main department
temp <- strsplit(V(G)$name, '-')
tempLevel <- c()
tempDept <- c()
for (i in temp){
tempLevel <- c(tempLevel, substr(i[2], 1, 1))
tempDept <- c(tempDept, i[1])
}
V(G)$level <- unlist(as.integer(tempLevel))
V(G)$mainDept <- tempDept
# run the sugiyama layout algorithm and incrase the coordinates for future readability
lyt <- layout.sugiyama(G, layers = V(G)$level)
biggerX <- lyt$layout[,1]*10
biggerY <- lyt$layout[,2]*100
# create and eport a tsv of the layout's coordinates
nodes <- get.data.frame(G, what = "vertices")
nodes["X"] <- biggerX
nodes["Y"] <- biggerY
nodes["Id"] <- nodes["name"]
nodes["name"] <- NULL
write.table(nodes, file = paste0(dept, "CourseLayout.tsv"), sep = '\t', row.names = F)
}
makeLayout('asian')
makeLayout <- function(dept){
# finds the addresses of the department's edgelist
efileStr <- paste0('./', dept, 'courseEdgelist.tsv')
# and nodes list
nfileStr <- paste0('./', dept, 'courseAttrs.tsv')
# reads in the graph object from the named edgelist tsv
edgelist <- read.delim(efileStr, stringsAsFactors = F)[,c(2,3)]
G <- graph.data.frame(edgelist)
# read in unconnected nodes from the named nodes table
nodeAttrs <- read.delim(nfileStr, stringsAsFactors = F)
unconnectedCourses <- nodeAttrs$Id[!(nodeAttrs$Id %in% V(G)$name)]
G <- add.vertices(G, length(unconnectedCourses),
attr = list(name = unconnectedCourses))
# identify each course's level, main department
temp <- strsplit(V(G)$name, '-')
tempLevel <- c()
tempDept <- c()
for (i in temp){
tempLevel <- c(tempLevel, substr(i[2], 1, 1))
tempDept <- c(tempDept, i[1])
}
V(G)$level <- unlist(as.integer(tempLevel))
V(G)$mainDept <- tempDept
# run the sugiyama layout algorithm and incrase the coordinates for future readability
lyt <- layout.sugiyama(G, layers = V(G)$level)
biggerX <- lyt$layout[,1]*100
biggerY <- lyt$layout[,2]*100
# create and eport a tsv of the layout's coordinates
nodes <- get.data.frame(G, what = "vertices")
nodes["X"] <- biggerX
nodes["Y"] <- biggerY
nodes["Id"] <- nodes["name"]
nodes["name"] <- NULL
write.table(nodes, file = paste0(dept, "CourseLayout.tsv"), sep = '\t', row.names = F)
}
makeLayout('asian')
majors <- c('architectural_studies', 'french', 'black_studies', 'computer_science',
'chemistry', 'economics', 'russian', 'spanish', 'neuroscience',
'mathematics', 'english', 'geology', 'american_studies', 'physics',
'anthropology_sociology', 'german', 'history', 'psychology',
'european_studies', 'sexuality_womens_gender_studies', 'ljst',
'political_science', 'asian', 'art', 'philosophy', 'film', 'courses',
'music', 'Biology', 'theater_dance', 'astronomy', 'environmental_studies',
'classics', 'religion')
for (s in majors){
makeLayout(s)
}
for (s in majors){
print(s)
makeLayout(s)
}
efileStr
?tryCatch
tryCatch(1, finally = print("Hello"))
e <- simpleError("test error")
stop(e)
tryCatch(stop(e), finally = print("Hello"))
tryCatch(stop("fred"), finally = print("Hello"))
for (s in majors){
print(s)
tryCatch(makeLayout(s))
}
majors <- c('architectural_studies', 'french', 'black_studies', 'computer_science',
'chemistry', 'economics', 'russian', 'spanish', 'neuroscience',
'mathematics', 'english', 'geology', 'physics',
'anthropology_sociology', 'german', 'history', 'psychology',
'european_studies', 'sexuality_womens_gender_studies', 'ljst',
'political_science', 'asian', 'art', 'philosophy', 'film', 'courses',
'music', 'Biology', 'theater_dance', 'astronomy', 'environmental_studies',
# 'american_studies',
'classics', 'religion')
for (s in majors){
print(s)
tryCatch(makeLayout(s))
}
majors <- c('architectural_studies', 'french', 'black_studies', 'computer_science',
'chemistry', 'economics', 'russian', 'spanish', 'neuroscience',
'mathematics', 'english', 'geology', 'physics',
'anthropology_sociology', 'german',  'psychology',
'european_studies', 'sexuality_womens_gender_studies', 'ljst',
'political_science', 'asian', 'art', 'philosophy', 'film', 'courses',
'music', 'Biology', 'theater_dance', 'astronomy', 'environmental_studies',
# 'american_studies',
# 'history',
'classics', 'religion')
for (s in majors){
print(s)
makeLayout(s)
}
for (s in majors){
print(s)
makeLayout(s)
}
majors <- c('architectural_studies', 'french', 'black_studies', 'computer_science',
'chemistry', 'economics', 'russian', 'spanish', 'neuroscience',
'mathematics', 'english', 'geology', 'physics',
'anthropology_sociology', 'german',  'psychology',
'european_studies', 'sexuality_womens_gender_studies', 'ljst',
'political_science', 'asian', 'art', 'philosophy', 'film', 'courses',
'music', 'Biology', 'theater_dance', 'astronomy', 'environmental_studies',
# 'american_studies',
# 'history', 'religion',
'classics' )
for (s in majors){
print(s)
makeLayout(s)
}
any(c(F,F), c(T))
hist(rbeta(10000,5,2))
hist(rbeta(10000,2,5))
hist(rbeta(10000,5,5))
x <- rbeta(10000,5,5)
head(x)
x - 1
(x - 1)^2
x <- rbeta(10000,5,2)
mu <- mean(x)
me <- median(x)
ssmu <- sum((x - mu)^2)
ssme <- sum((x - me)^2)
ssmu
ssme
dme <- sum(x - me)
dme
dmu <- sum(x - mu)
dmu
hits <- len(x[x - me < .1])
hits <- length(x[x - me < .1])
hits
hits <- length(x[x-mu < .1])
hits
require(mosaic)
install.packages("mosaic")
?install.packages
install.packages("installr")
installr
getwd()
setwd("~/home/steven/HackPVTA")
setwd("~/home/steven/HackPVTA")
setwd("/home/steven/HackPVTA")
getwd()
f.in <- file("first_day.csv", "r")
first.day <- read.table("first_day.csv")
?read.table
first.day <- read.table("first_day.csv", header = T)
first.day <- read.table("first_day.csv", header = T, sep = ",")
View(first.day)
system.time(first.day <- read.table("first_day.csv", header = T, sep = ","))
?input
require(igraph)
input.file <- "first_day.csv"
f.in <- file(input.file, "r")
line <- readLines(f.in)
line
line.by.line
line[1]
line[1]
read.table(line[1], sep = ',')
names(first.day)
head(first.day$X)
system.time(first.day <- read.table("first_day.csv", header = T, sep = ",", row.names = 'X'))
names(first.day)
?column.names
'ab'.strsplit('a')
strsplit('ab', 'a')
system.time(strsplit('ab', 'a'))
system.time(rep(strsplit('ab', 'a'),1000))
?cat
?file
table(first.day$OffRouteStatus ~ first.day$OperationalStatus)
table(first.day$OffRouteStatus , first.day$OperationalStatus)
table(first.day$OffRouteStatus , first.day$Speed)
